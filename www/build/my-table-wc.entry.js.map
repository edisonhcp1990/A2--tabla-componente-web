{"file":"my-table-wc.entry.esm.js","mappings":";;AAAA,MAAM,YAAY,GAAG,iXAAiX;;MCOzX,eAAe;;;;oBAKH,EAAE;oBAGC,EAAE;qBAGH,EAAE;;;IAG3B,MAAM,iBAAiB;QACrB,IAAI;;YAEF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;YAE1C,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;;YAGtD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;;YAGrC,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;;YAG5E,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;aAC3B;iBAAM;;gBAEL,IAAI,CAAC,KAAK,GAAG,6CAA6C,CAAC;aAC5D;SACF;QAAC,OAAO,KAAK,EAAE;;YAEd,IAAI,CAAC,KAAK,GAAG,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC;SACxE;KACF;;IAGD,MAAM;;QAEJ,IAAI,IAAI,CAAC,KAAK;YAAE,OAAO,WAAK,KAAK,EAAC,OAAO,IAAE,IAAI,CAAC,KAAK,CAAO,CAAC;;QAG7D,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;;QAGxC,QACE,iBACE,iBACE,cACG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAChB,cAAK,GAAG,CAAM,CACf,CAAC,CACC,CACC,EACR,iBACG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,KACjB,cACG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,cAAK,IAAI,CAAC,GAAG,CAAC,CAAM,CAAC,CACxC,CACN,CAAC,CACI,CACF,EACR;KACH;;;;;;","names":[],"sources":["src/components/my-table-wc/my-table-wc.css?tag=my-table-wc&encapsulation=shadow","src/components/my-table-wc/my-table-wc.tsx"],"sourcesContent":[":host {\r\n    display: block;\r\n    font-family: Arial, sans-serif;\r\n  }\r\n  \r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    background-color: #e8f5e9; \r\n  }\r\n  \r\n  th, td {\r\n    padding: 10px;\r\n    text-align: left;\r\n    border: 2px solid #81c784; \r\n  }\r\n  \r\n  th {\r\n    background-color: #388e3c; \r\n    cursor: pointer;\r\n  }\r\n  \r\n  th:hover {\r\n    background-color: #2e7d32; \r\n  }\r\n  \r\n  td {\r\n    color: #388e3c; \r\n  }\r\n  \r\n  tr:nth-child(even) {\r\n    background-color: #c8e6c9; \r\n  }\r\n  \r\n  .error {\r\n    color: #d32f2f;\r\n    font-weight: bold;\r\n    margin: 10px 0;\r\n  }\r\n  ","import { Component, Prop, State, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'my-table-wc',  \r\n  styleUrl: 'my-table-wc.css',  \r\n  shadow: true,  \r\n})\r\nexport class ResponsiveTable {\r\n  // Propiedad que recibe una URL de API para obtener datos.\r\n  @Prop() apiUrl: string;\r\n\r\n  // Estado que almacena los datos obtenidos de la API.\r\n  @State() data: any[] = [];\r\n  \r\n  // Estado que almacena las claves de los objetos de datos para crear las cabeceras de la tabla.\r\n  @State() keys: string[] = [];\r\n  \r\n  // Estado que almacena los mensajes de error, si los hubiera.\r\n  @State() error: string = '';\r\n\r\n  // Método que se ejecuta antes de que el componente se cargue por primera vez.\r\n  async componentWillLoad() {\r\n    try {\r\n      // Realiza una solicitud HTTP para obtener los datos de la URL proporcionada.\r\n      const response = await fetch(this.apiUrl);\r\n      // Verifica si la respuesta es correcta, de lo contrario lanza un error.\r\n      if (!response.ok) throw new Error('Error en la red.');\r\n      \r\n      // Convierte la respuesta en JSON.\r\n      const result = await response.json();\r\n      \r\n      // Procesa los datos: si no es un array, intenta acceder a una propiedad 'results' (esto puede variar según la API).\r\n      const processedData = Array.isArray(result) ? result : result.results || [];\r\n      \r\n      // Si hay datos procesados, establece las claves (encabezados de columna) y los datos en el estado.\r\n      if (processedData.length > 0) {\r\n        this.keys = Object.keys(processedData[0]);\r\n        this.data = processedData;\r\n      } else {\r\n        //mensaje de error si no se pueden reconocer los datos, establece un.\r\n        this.error = 'El formato de datos no puede ser reconocido';\r\n      }\r\n    } catch (error) {\r\n      //mensaje de error.\r\n      this.error = `Error al momento de obtener los datos: ${error.message}`;\r\n    }\r\n  }\r\n\r\n  // Método que define cómo se debe renderizar el componente.\r\n  render() {\r\n    // Si hay un mensaje de error, muestra el mensaje en un elemento con la clase 'error'.\r\n    if (this.error) return <div class=\"error\">{this.error}</div>;\r\n    \r\n    // Solo renderiza la tabla si hay datos disponibles\r\n    if (this.data.length === 0) return null;\r\n\r\n    // Renderiza la tabla con los datos obtenidos.\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {this.keys.map(key => (\r\n              <th>{key}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.data.map(item => (\r\n            <tr>\r\n              {this.keys.map(key => <td>{item[key]}</td>)}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n"],"version":3}